blueprint:
  name: Room heating setpoint compute
  description: Compute heating setpoint based on planning °C, Confort & Eco °C and manually set °C
  domain: automation
  source_url: https://github.com/francois09/HA_blueprints/heater_setpoint_compute.yaml
  input:
    climate_valve:
      name: Climate valve
      description: Room TRV (viewed as Climate)
      selector:
        entity:
          domain: climate
    comfort_temp:
      name: Comfort T° of the room
      description: The comfort T° selected for the room
      selector:
        entity:
          domain: input_number
    eco_temp:
      name: Eco T° of the room
      description: The eco T° selected for the room
      selector:
        entity:
          domain: input_number
    schedule:
      name: Planning of the room
      description: The schedule T° of the room
      selector:
        entity:
          domain: schedule
    manual_boolean:
      name: Manual mode switch
      description: Switch indicating if the room is in manual or automated mode
      selector:
        entity:
          domain: input_boolean
    setpoint:
      name: Selected °C setpoint
      description: Setpoint value of the room
      selector:
        entity:
          domain: input_number
    winter_mode_boolean:
      name: Winter switch
      description: Global switch to say it's winter or not.
      selector:
        entity:
          domain: input_boolean
    occupancy_boolean:
      name: Occupancy
      description: Room indicator for occupancy
      selector:
        entity:
          domain: input_boolean
    debounce_boolean:
      name: Debounce valve update
      description: Room debounce boolean flag
      selector:
        entity:
          domain: input_boolean

mode: queued
max_exceeded: silent

variables:
  local_comfort_temp: !input comfort_temp
  local_eco_temp: !input eco_temp
  local_setpoint: !input setpoint
  local_climate_valve: !input climate_valve

trigger:
- platform: state
  entity_id: !input comfort_temp
- platform: state
  entity_id: !input eco_temp
- platform: state
  entity_id: !input schedule
- platform: state
  entity_id: !input manual_boolean
- platform: state
  entity_id: !input occupancy_boolean

condition:
  - condition: state
    entity_id: !input winter_mode_boolean
    state: 'on'

action:
- choose:

  #
  # When no occupancy, set eco temp
  #
  - conditions:
    - condition: state
      entity_id: !input occupancy_boolean
      state: 'off'
    sequence:
    - service: input_number.set_value
      data_template:
        value: '{{ states(local_eco_temp) }}'
        entity_id: !input setpoint
    - if:
      - condition: template
        value_template: '{{ state_attr(local_climate_valve, ''temperature'')|float != states(local_setpoint)|float }}'
      then:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: !input debounce_boolean
      - service: climate.set_temperature
        data_template:
          temperature: '{{ states(local_setpoint) }}'
          entity_id: !input climate_valve

  #
  # When manual, send local setpoint to the valve (used in case of restarting valve for example)
  #
  - conditions:
    - condition: state
      entity_id: !input manual_boolean
      state: 'on'
    sequence:
    - if:
      - condition: template
        value_template: '{{ state_attr(local_climate_valve, ''temperature'')|float != states(local_setpoint)|float }}'
      then:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: !input debounce_boolean
      - service: climate.set_temperature
        data_template:
          temperature: '{{ states(local_setpoint) }}'
          entity_id: !input climate_valve

  #
  # When auto, and schedule is on, set comfort t°
  #
  - conditions:
    - condition: state
      entity_id: !input manual_boolean
      state: 'off'
    - condition: state
      entity_id: !input schedule
      state: 'on'
    - condition: state
      entity_id: !input occupancy_boolean
      state: 'on'
    sequence:
    - service: input_number.set_value
      data_template:
        value: '{{ states(local_comfort_temp) }}'
        entity_id: !input setpoint
    - if:
      - condition: template
        value_template: '{{ state_attr(local_climate_valve, ''temperature'')|float != states(local_setpoint)|float }}'
      then:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: !input debounce_boolean
      - service: climate.set_temperature
        data_template:
          temperature: '{{ states(local_setpoint) }}'
          entity_id: !input climate_valve

  #
  # When auto, and schedule is off, set eco t°
  #
  - conditions:
    - condition: state
      entity_id: !input manual_boolean
      state: 'off'
    - condition: state
      entity_id: !input schedule
      state: 'off'
    sequence:
    - service: input_number.set_value
      data_template:
        value: '{{ states(local_eco_temp) }}'
        entity_id: !input setpoint
    - if:
      - condition: template
        value_template: '{{ state_attr(local_climate_valve, ''temperature'')|float != states(local_setpoint)|float }}'
      then:
      - service: input_boolean.turn_on
        data: {}
        target:
          entity_id: !input debounce_boolean
      - service: climate.set_temperature
        data_template:
          temperature: '{{ states(local_setpoint) }}'
          entity_id: !input climate_valve
