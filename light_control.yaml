blueprint:
  name: Light control
  description: Control light based on daylight, cloud covering, occupancy and switch
  domain: automation
  source_url: https://github.com/francois09/HA_blueprints/light_control.yaml
  input:
    motion_sensor:
      name: Motion sensor of the room
      selector:
        entity:
          domain: binary_sensor
          device_class: motion
          multiple: true
    light_device:
      name: Light management device
      selector:
        entity:
          domain: light
    is_window:
      name: Is there a window in the room
      description: Is there a window, allowing external light to enter ?
      default: True
      selector:
        boolean:
    is_bedroom:
      name: Is this a bedroom
      description: Is the room a sleeping room ?
      default: False
      selector:
        boolean:
    day_brightness:
      name: Daylight brightness percent
      description: Brightness to set when daylight or blind room
      default: 100
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
          step: 1
    night_brightness:
      name: Night brightness percent
      description: Brightness to set when it's night
      default: 2
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: "%"
          mode: slider
          step: 1
    off_delay:
      name: Delay before really turning off
      description: Wait some time after no motion before turning light off really !
      default: 0
      selector:
        number:
          min: 0
          max: 120
          unit_of_measurement: "seconds"
          mode: slider
          step: 10
    debounce_boolean:
      name: Waiter for the bounce message
      description: Boolean to indicate previous action was automated, wait for light message
      selector:
        entity:
          domain: input_boolean

mode: restart
max_exceeded: silent

variables:
  is_window: !input is_window
  is_bedroom: !input is_bedroom
  day_brightness: !input day_brightness
  night_brightness: !input night_brightness
  # debounce_boolean: !input debounce_boolean


trigger:
- platform: state
  entity_id: !input motion_sensor
  id: trigger_by_motion
  to: 'on'
- platform: state
  entity_id: !input motion_sensor
  id: trigger_by_nomotion
  to: 'off'
- platform: state
  entity_id: !input light_device
  id: trigger_by_light

action:
- choose:

  ########## Gobble message boucing following automation action
  #
  - conditions:
    - condition: state
      entity_id: !input debounce_boolean
      state: 'on'
    - condition: trigger
      id:
        - trigger_by_light
    sequence:
    - service: input_boolean.turn_off
      data: {}
      target:
        entity_id: !input debounce_boolean

  ############## MANUAL BUTTON NOT TAKEN INTO ACCOUNT NOW
  # #
  # # Light on (before sunset, after sunrise == Day)
  # # -> Turn on the light
  # - conditions:
  #   - condition: state
  #     entity_id: !input light_device
  #     state: 'on'
  #   - condition: trigger
  #     id:
  #       - trigger_by_light
  #   - condition: sun
  #     before: sunset
  #     after: sunrise
  #     # after_offset: '-1:00:00'
  #     # before_offset: '-1:00:00'
  #   sequence:
  #   - service: light.turn_on
  #     target:
  #       entity_id: !input light_device
  #     data:
  #       brightness_pct: "{{ day_brightness}}"

  ############## MANUAL BUTTON NOT TAKEN INTO ACCOUNT NOW
  # #
  # # Light on (after sunset, before sunrise == Night)
  # # -> Turn on the light at N%
  # - conditions:
  #   - condition: state
  #     entity_id: !input light_device
  #     state: 'on'
  #   - condition: trigger
  #     id:
  #       - trigger_by_light
  #   - condition: sun
  #     before: sunrise
  #     after: sunset
  #     # after_offset: '-1:00:00'
  #     # before_offset: '-1:00:00'
  #   sequence:
  #   - service: light.turn_on
  #     target:
  #       entity_id: !input light_device
  #     data:
  #       brightness_pct: "{{ night_brightness}}"

  #
  # No motion
  # -> Turn off the light
  # (in case of multiple sensors, we need to check if ALL motion sensors are OFF )
  - conditions:
    - condition: state
      entity_id: !input motion_sensor
      state: 'off'
    - condition: trigger
      id:
        - trigger_by_nomotion
    sequence:
    - delay: !input off_delay
    - service: light.turn_off
      target:
        entity_id: !input light_device
    - service: input_boolean.turn_on
      data: {}
      target:
        entity_id: !input debounce_boolean

  #
  # Motion during the day, and for no_window rooms
  # -> Turn on the light 100%
  - conditions:
    # - condition: state
    #   entity_id: !input motion_sensor
    #   state: 'on'
    - condition: trigger
      id:
        - trigger_by_motion
    - condition: state
      entity_id: !input light_device
      state: 'off'
    - condition: sun
      before: sunset
      after: sunrise
      # after_offset: '-1:00:00'
      # before_offset: '-1:00:00'
    - condition: template
      value_template: "{{ not is_window }}"
    sequence:
    - service: light.turn_on
      target:
        entity_id: !input light_device
      data:
        brightness_pct: "{{ day_brightness}}"
    - service: input_boolean.turn_on
      data: {}
      target:
        entity_id: !input debounce_boolean

  #
  # Motion during the night, and not a bedroom
  # -> Turn on the light 100% if before 22h
  - conditions:
    # - condition: state
    #   entity_id: !input motion_sensor
    #   state: 'on'
    - condition: trigger
      id:
        - trigger_by_motion
    - condition: state
      entity_id: !input light_device
      state: 'off'
    - condition: sun
      before: sunrise
      after: sunset
      # after_offset: '-1:00:00'
      # before_offset: '-1:00:00'
    - condition: time
      before: '22:00:00'
      after: '08:00:00'
    - condition: template
      value_template: "{{ not is_bedroom }}"
    sequence:
    - service: light.turn_on
      target:
        entity_id: !input light_device
      data:
        brightness_pct: "{{ day_brightness}}"
    - service: input_boolean.turn_on
      data: {}
      target:
        entity_id: !input debounce_boolean

  #
  # Motion during the night, and not a bedroom
  # -> Turn on the light N% if after 22h
  - conditions:
    # - condition: state
    #   entity_id: !input motion_sensor
    #   state: 'on'
    - condition: trigger
      id:
        - trigger_by_motion
    - condition: state
      entity_id: !input light_device
      state: 'off'
    - condition: sun
      before: sunrise
      after: sunset
      # after_offset: '-1:00:00'
      # before_offset: '-1:00:00'
    - condition: time
      after: '22:00:00'
      before: '08:00:00'
    - condition: template
      value_template: "{{ not is_bedroom }}"
    sequence:
    - service: light.turn_on
      target:
        entity_id: !input light_device
      data:
        brightness_pct: "{{ night_brightness}}"
    - service: input_boolean.turn_on
      data: {}
      target:
        entity_id: !input debounce_boolean
